name: Deploy to AWS EC2

on:
  push:
    branches: [ main, feature/*, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

# Globale Einstellungen für alle Jobs
env:
  TF_LOG: INFO

jobs:
  setup-infrastructure:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      TF_VAR_aws_region: eu-central-1
      TF_VAR_your_ip: 0.0.0.0/0
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: "1.5.0"
        terraform_wrapper: false

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.TF_VAR_aws_region }}

    # SSH-Public-Key aus GitHub Secrets als Umgebungsvariable setzen
    - name: Set SSH Public Key
      run: |
        if [ -n "${{ secrets.SSH_PUBLIC_KEY }}" ]; then
          echo "TF_VAR_github_public_key=${{ secrets.SSH_PUBLIC_KEY }}" >> $GITHUB_ENV
        else
          echo "WARNUNG: SSH_PUBLIC_KEY ist nicht gesetzt. Verwende leeren Wert."
          echo "TF_VAR_github_public_key=ssh-rsa PLACEHOLDER" >> $GITHUB_ENV
        fi

    - name: Terraform Init
      run: |
        cd infra
        terraform init -input=false -no-color

    - name: Terraform Plan
      run: |
        cd infra
        terraform plan -input=false -no-color

    - name: Terraform Apply
      run: |
        cd infra
        echo "Starte Terraform Apply..."
        terraform apply -auto-approve -input=false -no-color
        echo "Terraform Apply abgeschlossen!"
        
        # Debug-Informationen ausgeben
        echo "Verfügbare Outputs:"
        terraform output
        
        # Outputs in Environment-Variablen und Dateien speichern
        mkdir -p ../outputs
        
        # Die folgenden Zeilen sind auskommentiert, da keine EC2-Outputs mehr vorhanden sind
        # PUBLIC_IP=$(terraform output -raw public_ip || echo "keine_ip")
        # echo "Erkannte IP: $PUBLIC_IP"
        # echo "EC2_PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
        # echo "$PUBLIC_IP" > ../outputs/ec2_public_ip.txt
        
        # PUBLIC_DNS=$(terraform output -raw public_dns || echo "kein_dns")
        # echo "Erkannte DNS: $PUBLIC_DNS"
        # echo "EC2_PUBLIC_DNS=$PUBLIC_DNS" >> $GITHUB_ENV
        # echo "$PUBLIC_DNS" > ../outputs/ec2_public_dns.txt

    - name: Upload outputs
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs
        path: ./outputs/
        retention-days: 1

  build-and-deploy:
    needs: setup-infrastructure
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Download Terraform outputs
      uses: actions/download-artifact@v4
      with:
        name: terraform-outputs
        path: ./outputs
        
    - name: Set environment variables
      run: |
        # Debug-Informationen ausgeben
        ls -la ./outputs
        
        # Die folgenden Zeilen sind auskommentiert, da keine EC2-Outputs mehr vorhanden sind
        # if [ -s "./outputs/ec2_public_ip.txt" ]; then
        #   PUBLIC_IP=$(cat ./outputs/ec2_public_ip.txt)
        #   echo "Gefundene IP: $PUBLIC_IP"
        #   echo "EC2_PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
        # else
        #   echo "WARNUNG: IP-Datei fehlt oder ist leer! Setze Default-Wert."
        #   echo "EC2_PUBLIC_IP=keine_ip" >> $GITHUB_ENV
        # fi
        # 
        # if [ -s "./outputs/ec2_public_dns.txt" ]; then
        #   PUBLIC_DNS=$(cat ./outputs/ec2_public_dns.txt)
        #   echo "Gefundener DNS: $PUBLIC_DNS"
        #   echo "EC2_PUBLIC_DNS=$PUBLIC_DNS" >> $GITHUB_ENV
        # else
        #   echo "WARNUNG: DNS-Datei fehlt oder ist leer! Setze Default-Wert."
        #   echo "EC2_PUBLIC_DNS=kein_dns" >> $GITHUB_ENV
        # fi

    # Die folgenden Schritte können auskommentiert oder entfernt werden,
    # da sie auf die EC2-Instanz zugreifen wollen:
    # - Set up SSH
    # - Deploy to EC2
    # - Show Deployment URL

    # Beispiel:
    # - name: Set up SSH
    #   ...
    # - name: Deploy to EC2
    #   ...
    # - name: Show Deployment URL
    #   ...
